// Copyright (c) 2015, Baidu.com, Inc. All Rights Reserved
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Copyright (c) 2012 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#include "leveldb/filter_policy.h"

#include "leveldb/raw_key_operator.h"
#include "leveldb/slice.h"
#include "util/hash.h"

namespace leveldb {

namespace {

typedef uint32_t (*BloomHashMethod)(const Slice& key);

static uint32_t BuiltInBloomHash(const Slice& key) {
  return Hash(key.data(), key.size(), 0xbc9f1d34);
}

static uint32_t TTLKvBloomHash(const Slice& key) {
  return Hash(key.data(), key.size() - 8, 0xbc9f1d34);
}

class BloomFilterPolicy : public FilterPolicy {
 private:
  size_t bits_per_key_;
  size_t k_;
  BloomHashMethod hash_method_;

 public:
  explicit BloomFilterPolicy(int bits_per_key, BloomHashMethod hash_method)
      : bits_per_key_(bits_per_key),
        hash_method_(hash_method) {
    // We intentionally round down to reduce probing cost a little bit
    k_ = static_cast<size_t>(bits_per_key * 0.69);  // 0.69 =~ ln(2)
    if (k_ < 1) k_ = 1;
    if (k_ > 30) k_ = 30;
  }

  virtual const char* Name() const {
    return "leveldb.BuiltinBloomFilter";
  }

  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {
    // Compute bloom filter size (in both bits and bytes)
    size_t bits = n * bits_per_key_;

    // For small n, we can see a very high false positive rate.  Fix it
    // by enforcing a minimum bloom filter length.
    if (bits < 64) bits = 64;

    size_t bytes = (bits + 7) / 8;
    bits = bytes * 8;

    const size_t init_size = dst->size();
    dst->resize(init_size + bytes, 0);
    dst->push_back(static_cast<char>(k_));  // Remember # of probes in filter
    char* array = &(*dst)[init_size];
    for (size_t i = 0; i < static_cast<size_t>(n); i++) {
      // Use double-hashing to generate a sequence of hash values.
      // See analysis in [Kirsch,Mitzenmacher 2006].
      uint32_t h = hash_method_(keys[i]);
      const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
      for (size_t j = 0; j < k_; j++) {
        const uint32_t bitpos = h % bits;
        array[bitpos/8] |= (1 << (bitpos % 8));
        h += delta;
      }
    }
  }

  virtual bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const {
    const size_t len = bloom_filter.size();
    if (len < 2) return false;

    const char* array = bloom_filter.data();
    const size_t bits = (len - 1) * 8;

    // Use the encoded k so that we can read filters generated by
    // bloom filters created using different parameters.
    const size_t k = array[len-1];
    if (k > 30) {
      // Reserved for potentially new encodings for short bloom filters.
      // Consider it a match.
      return true;
    }

    uint32_t h = hash_method_(key);
    const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
    for (size_t j = 0; j < k; j++) {
      const uint32_t bitpos = h % bits;
      if ((array[bitpos/8] & (1 << (bitpos % 8))) == 0) return false;
      h += delta;
    }
    return true;
  }
};

class RowKeyBloomFilterPolicy : public BloomFilterPolicy {
 private:
  const RawKeyOperator* raw_key_operator_;

 public:
  explicit RowKeyBloomFilterPolicy(int bits_per_key, BloomHashMethod hash_method,
                                   const RawKeyOperator* raw_key_operator)
      : BloomFilterPolicy(bits_per_key, hash_method),
        raw_key_operator_(raw_key_operator) {
  }

  virtual const char* Name() const {
    return "tera.RowKeyBloomFilter";
  }

  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {
    Slice* row_keys = new Slice[n];
    int row_key_num = 0;

    for (int i = 0; i < n; i++) {
      Slice row_key;
      raw_key_operator_->ExtractTeraKey(keys[i], &row_key, NULL, NULL, NULL, NULL);
      if (row_key_num == 0 || row_key.compare(row_keys[row_key_num - 1]) != 0) {
        row_keys[row_key_num++] = row_key;
      }
    }
    BloomFilterPolicy::CreateFilter(row_keys, row_key_num, dst);
    delete[] row_keys;
  }

  virtual bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const {
    Slice row_key;
    if (raw_key_operator_->ExtractTeraKey(key, &row_key, NULL, NULL, NULL, NULL)) {
      return BloomFilterPolicy::KeyMayMatch(row_key, bloom_filter);
    } else {
      return true;
    }
  }
};

}

const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {
  return new BloomFilterPolicy(bits_per_key, BuiltInBloomHash);
}

const FilterPolicy* NewTTLKvBloomFilterPolicy(int bits_per_key) {
  return new BloomFilterPolicy(bits_per_key, TTLKvBloomHash);
}

const FilterPolicy* NewRowKeyBloomFilterPolicy(int bits_per_key, const RawKeyOperator* raw_key_operator) {
  return new RowKeyBloomFilterPolicy(bits_per_key, BuiltInBloomHash, raw_key_operator);
}

}  // namespace leveldb
