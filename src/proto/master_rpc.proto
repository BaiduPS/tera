import "sofa/pbrpc/rpc_option.proto";
import "status_code.proto";
import "tabletnode.proto";
import "table_schema.proto";
import "table_meta.proto";
import "access_control.proto";
import "quota.proto";

package tera;

// Table operation

message CreateTableRequest {
    required uint64 sequence_id = 1;
    required string table_name = 2;
    optional TableSchema schema = 3;
    repeated bytes delimiters = 6;
    optional bytes user_token = 7;
    optional IdentityInfo identity_info = 8;
}

message CreateTableResponse {
    required StatusCode status = 1;
    required uint64 sequence_id = 2;
    optional TabletMetaList meta_list = 3;
}

message DeleteTableRequest {
    required uint64 sequence_id = 1;
    required string table_name = 2;
    optional bytes user_token = 3;
    optional IdentityInfo identity_info = 4;
}

message DeleteTableResponse {
    required StatusCode status = 1;
    required uint64 sequence_id = 2;
}

message DisableTableRequest {
    required uint64 sequence_id = 1;
    required string table_name = 2;
    optional bytes user_token = 3;
    optional IdentityInfo identity_info = 4;
}

message DisableTableResponse {
    required StatusCode status = 1;
    required uint64 sequence_id = 2;
}

message EnableTableRequest {
    required uint64 sequence_id = 1;
    required string table_name = 2;
    optional bytes user_token = 3;
    optional IdentityInfo identity_info = 4;
}

message EnableTableResponse {
    required StatusCode status = 1;
    required uint64 sequence_id = 2;
}

message UpdateTableRequest {
    required uint64 sequence_id = 1;
    required string table_name = 2;
    optional TableSchema schema = 3;
    optional bytes user_token = 4;
    optional IdentityInfo identity_info = 5;
}

message UpdateTableResponse {
    required StatusCode status = 1;
    required uint64 sequence_id = 2;
}

message UpdateCheckRequest {
    optional uint64 sequence_id = 1;
    optional string table_name = 2;
    optional bytes user_token = 3;
}

message UpdateCheckResponse {
    optional uint64 sequence_id = 1;
    optional StatusCode status = 2;
    optional bool done = 3;
}

message SearchTableRequest {
    required uint64 sequence_id = 1;
    required string prefix_table_name = 2;
    optional string start_table_name = 3;
    optional bytes start_tablet_key = 4;
    optional uint32 max_num = 5;
}

message SearchTableResponse {
    required StatusCode status = 1;
    required uint64 sequence_id = 2;
    optional TabletMetaList meta_list = 3;
    optional bool is_more = 4;
}

message ShowTablesRequest {
    required uint64 sequence_id = 1;
    optional string start_table_name = 2;
    optional bytes start_tablet_key = 3;
    optional uint32 max_table_num = 4;
    optional uint32 max_tablet_num = 5;
    optional bytes user_token = 6;

    optional bool all_brief = 7;
}

message ShowTablesResponse {
    required StatusCode status = 1;
    required uint64 sequence_id = 2;
    optional TabletMetaList tablet_meta_list = 3;
    optional TableMetaList table_meta_list = 4;
    optional bool is_more = 5;

    optional bool all_brief = 7;
}

message ShowTabletNodesRequest {
    required uint64 sequence_id = 1;
    optional string addr = 2;
    optional bool is_showall = 3 [default = true];
    optional bytes user_token = 4;
}

message ShowTabletNodesResponse {
    required StatusCode status = 1;
    required uint64 sequence_id = 2;
    repeated TabletNodeInfo tabletnode_info = 3;
    optional TabletMetaList tabletmeta_list = 4;
}

// acl
message UserInfo {
    required string user_name = 1;
    repeated string group_name = 2;
    optional string token = 3;
}

enum UserOperateType {
    kCreateUser = 1;
    kDeleteUser = 2;
    kChangePwd = 3;
    kShowUser = 4;
    kAddToGroup = 5;
    kDeleteFromGroup = 6;
}

message OperateUserRequest {
    optional uint64 sequence_id = 1;
    optional bytes user_token = 3; // token of which user call this request
    optional UserInfo user_info = 2; // operated user
    optional UserOperateType op_type = 4;
}

message OperateUserResponse {
    optional uint64 sequence_id = 1;
    optional StatusCode status = 2;
    optional UserInfo user_info = 3;
}

// Tablet node

message RegisterRequest {
    required uint64 sequence_id = 1;
    required TabletNodeInfo tabletnode_info = 2;
}

message RegisterResponse {
    required StatusCode status = 1;
    required uint64 sequence_id = 2;
}

message ReportRequest {
    required uint64 sequence_id = 1;
    required TabletNodeInfo tabletnode_info = 2;
}

message ReportResponse {
    required StatusCode status = 1;
    required uint64 sequence_id = 2;
}

// admin

message CmdCtrlRequest {
    required uint64 sequence_id = 1;
    required string command = 2;
    repeated string arg_list = 3;
}

message CmdCtrlResponse {
    required uint64 sequence_id = 1;
    required StatusCode status = 2;
    optional bool bool_result = 3;
    optional string str_result = 4;
}
// RPC interface

service MasterServer {
    rpc CreateTable(CreateTableRequest) returns(CreateTableResponse);
    rpc DeleteTable(DeleteTableRequest) returns (DeleteTableResponse);
    rpc DisableTable(DisableTableRequest) returns (DisableTableResponse);
    rpc EnableTable(EnableTableRequest) returns (EnableTableResponse);
    rpc UpdateTable(UpdateTableRequest) returns (UpdateTableResponse);
    rpc UpdateCheck(UpdateCheckRequest) returns (UpdateCheckResponse);
    rpc SearchTable(SearchTableRequest) returns(SearchTableResponse);

    rpc ShowTables(ShowTablesRequest) returns(ShowTablesResponse);
    rpc ShowTabletNodes(ShowTabletNodesRequest) returns(ShowTabletNodesResponse);

    rpc Register(RegisterRequest) returns(RegisterResponse);
    rpc Report(ReportRequest) returns(ReportResponse);

    rpc CmdCtrl(CmdCtrlRequest) returns(CmdCtrlResponse);
    rpc OperateUser(OperateUserRequest) returns(OperateUserResponse);
}

// Multi-Tenancy
message UpdateUgiRequest {
    required uint64 sequence_id = 1;
    required UpdateAuthInfo update_info = 2;
    optional IdentityInfo identity_info = 3;
}

message UpdateUgiResponse {
    required uint64 sequence_id = 1;
    required StatusCode status = 2;
}

message ShowUgiRequest {
    required uint64 sequence_id = 1;
    optional IdentityInfo identity_info = 2;
}

message ShowUgiResponse {
    required uint64 sequence_id = 1;
    required StatusCode status = 2;
    repeated UgiMetaInfo ugi_meta_infos = 3;
}

message UpdateAuthRequest {
    required uint64 sequence_id = 1;
    required UpdateAuthInfo update_info = 2;
    optional IdentityInfo identity_info = 3;
}

message UpdateAuthResponse {
    required uint64 sequence_id = 1;
    required StatusCode status = 2;
}

message ShowAuthRequest {
    required uint64 sequence_id = 1;
    optional IdentityInfo identity_info = 2;
}

message ShowAuthResponse {
    required uint64 sequence_id = 1;
    required StatusCode status = 2;
    repeated RoleInfo role_infos = 3;
}

message SetAuthPolicyRequest {
    required TableAuthPolicyInfo table_auth_policy_info = 1;
    optional IdentityInfo identity_info = 2;
}

message SetAuthPolicyResponse {
    required StatusCode status = 1;
}

message ShowAuthPolicyRequest {
    optional IdentityInfo identity_info = 1;
}

message ShowAuthPolicyResponse {
    required StatusCode status = 1;
    repeated TableAuthPolicyInfo table_auth_policy_infos = 2;
}

message SetQuotaRequest {
    required uint64 sequence_id = 1;
    required TableQuota table_quota = 2;
}

message SetQuotaResponse {
    required uint64 sequence_id = 1;
    required StatusCode status = 2;
}

message ShowQuotaRequest {
    required uint64 sequence_id = 1;
    required bool brief_show = 10 [default = true];
}

message ShowQuotaResponse {
    required uint64 sequence_id = 1;
    required StatusCode status = 2;
    repeated TableQuota table_quota_list = 3;
    repeated TsQuota ts_quota_list = 4;
}

service MasterMultiTenancyService {
    rpc UpdateUgi(UpdateUgiRequest) returns (UpdateUgiResponse);
    rpc ShowUgi(ShowUgiRequest) returns (ShowUgiResponse);

    rpc UpdateAuth(UpdateAuthRequest) returns (UpdateAuthResponse);
    rpc ShowAuth(ShowAuthRequest) returns (ShowAuthResponse);

    rpc SetAuthPolicy(SetAuthPolicyRequest) returns(SetAuthPolicyResponse);
    rpc ShowAuthPolicy(ShowAuthPolicyRequest) returns (ShowAuthPolicyResponse);

    rpc SetQuota(SetQuotaRequest) returns(SetQuotaResponse);
    rpc ShowQuota(ShowQuotaRequest) returns(ShowQuotaResponse);
}

option cc_generic_services = true;
